name: Deploy to Production

on:
  push:
    branches:
      - deployment
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set lowercase image name
        id: vars
        run: |
          echo "image_name=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ steps.vars.outputs.image_name }}/frontend:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ steps.vars.outputs.image_name }}/frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ steps.vars.outputs.image_name }}/backend:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ steps.vars.outputs.image_name }}/backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Nginx image
        uses: docker/build-push-action@v5
        with:
          context: ./nginx
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ steps.vars.outputs.image_name }}/nginx:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ steps.vars.outputs.image_name }}/nginx:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set lowercase image name
        id: vars
        run: |
          echo "image_name=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Create deployment directory
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AZURE_VM_HOST }}
          username: ${{ secrets.AZURE_VM_USER }}
          key: ${{ secrets.AZURE_VM_SSH_PRIVATE_KEY }}
          script: |
            mkdir -p ~/budgetwise

      - name: Generate deployment files
        run: |
          # Create .env file
          cat << EOF > .env
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          FIREBASE_SERVICE_ACCOUNT=${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
          PUBLIC_BACKEND_API_URL=${{ secrets.PUBLIC_BACKEND_API_URL }}
          PUBLIC_FIREBASE_API_KEY=${{ secrets.PUBLIC_FIREBASE_API_KEY }}
          PUBLIC_FIREBASE_AUTH_DOMAIN=${{ secrets.PUBLIC_FIREBASE_AUTH_DOMAIN }}
          PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.PUBLIC_FIREBASE_PROJECT_ID }}
          PUBLIC_FIREBASE_STORAGE_BUCKET=${{ secrets.PUBLIC_FIREBASE_STORAGE_BUCKET }}
          PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          PUBLIC_FIREBASE_APP_ID=${{ secrets.PUBLIC_FIREBASE_APP_ID }}
          EOF

          # Patch docker-compose.deploy.yml to use built images
          sed -i "s|build: .*|image: ${{ env.REGISTRY }}/${{ steps.vars.outputs.image_name }}/frontend:${{ github.sha }}|" docker-compose.deploy.yml
          sed -i "s|context: ./frontend||" docker-compose.deploy.yml
          sed -i "s|dockerfile: Dockerfile||" docker-compose.deploy.yml
          sed -i "s|build: .*|image: ${{ env.REGISTRY }}/${{ steps.vars.outputs.image_name }}/backend:${{ github.sha }}|" docker-compose.deploy.yml
          sed -i "s|context: ./backend||" docker-compose.deploy.yml
          sed -i "s|build: .*|image: ${{ env.REGISTRY }}/${{ steps.vars.outputs.image_name }}/nginx:${{ github.sha }}|" docker-compose.deploy.yml
          sed -i "s|context: ./nginx||" docker-compose.deploy.yml

      - name: Copy deployment files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AZURE_VM_HOST }}
          username: ${{ secrets.AZURE_VM_USER }}
          key: ${{ secrets.AZURE_VM_SSH_PRIVATE_KEY }}
          source: "docker-compose.deploy.yml,.env"
          target: "~/budgetwise"
          overwrite: true

      - name: Deploy to VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AZURE_VM_HOST }}
          username: ${{ secrets.AZURE_VM_USER }}
          key: ${{ secrets.AZURE_VM_SSH_PRIVATE_KEY }}
          script: |
            cd ~/budgetwise
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
            docker-compose -f docker-compose.deploy.yml down || true
            docker-compose -f docker-compose.deploy.yml pull
            docker-compose -f docker-compose.deploy.yml up -d --build
            docker image prune -f

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AZURE_VM_HOST }}
          username: ${{ secrets.AZURE_VM_USER }}
          key: ${{ secrets.AZURE_VM_SSH_PRIVATE_KEY }}
          script: |
            cd ~/budgetwise
            docker-compose -f docker-compose.deploy.yml ps
