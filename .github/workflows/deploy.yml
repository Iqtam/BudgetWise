name: Deploy to Production

on:
  push:
    branches:
      - deployment
      - main # Optional: Enable deployment from main branch
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Wait for CI to complete before deploying (only when triggered from main branch)
  wait-for-ci:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' # Only run when pushing to main
    steps:
      - name: Wait for CI jobs to complete
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.ref }}
          check-regexp: "(test-backend|test-frontend|docker-build|security-scan).*"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30 # Check every 30 seconds
          running-workflow-name: "Deploy to Production" # Exclude self
          allowed-conclusions: success # Only proceed if all checks pass

      - name: CI jobs completed
        run: echo "✅ All CI jobs have completed successfully! Proceeding with deployment..."

  build-and-push:
    runs-on: ubuntu-latest
    needs: wait-for-ci # Wait for CI to pass (when applicable)
    if: always() && (needs.wait-for-ci.result == 'success' || needs.wait-for-ci.result == 'skipped')
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Nginx image
        uses: docker/build-push-action@v5
        with:
          context: ./nginx
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/nginx:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/nginx:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.AZURE_VM_SSH_PRIVATE_KEY }}

      - name: Add Azure VM to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.AZURE_VM_HOST }} >> ~/.ssh/known_hosts

      - name: Pull latest code and deploy
        run: |
          ssh ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }} << 'EOF'
            cd ~/BudgetWise
            git checkout main
            git pull origin main
            docker compose -f docker-compose.deploy.yml down || true
            docker compose -f docker-compose.deploy.yml pull || true
            docker compose -f docker-compose.deploy.yml up -d --build
            docker compose -f docker-compose.deploy.yml ps
          EOF

      - name: Notify deployment success
        run: |
          echo "🚀 Deployment to Azure VM completed successfully!"
          echo "📍 Branch: ${{ github.ref_name }}"
          echo "📝 Commit: ${{ github.sha }}"
          echo "👤 Triggered by: ${{ github.actor }}"
