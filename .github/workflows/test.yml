name: Test Suite

on:
  push:
    branches: [main, develop, front-back-testing, deploy-test]
  pull_request:
    branches: [main, develop]

env:
  # Database configuration
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

  # Backend configuration
  FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
  ADMIN_EMAIL: admin@budgetwise.test
  GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

  # Frontend configuration
  PUBLIC_BACKEND_API_URL: ${{ secrets.PUBLIC_BACKEND_API_URL }}
  PUBLIC_FIREBASE_API_KEY: ${{ secrets.PUBLIC_FIREBASE_API_KEY }}
  PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.PUBLIC_FIREBASE_AUTH_DOMAIN }}
  PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.PUBLIC_FIREBASE_PROJECT_ID }}
  PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.PUBLIC_FIREBASE_STORAGE_BUCKET }}
  PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
  PUBLIC_FIREBASE_APP_ID: ${{ secrets.PUBLIC_FIREBASE_APP_ID }}

jobs:
  # Backend Unit Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run backend tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          FIREBASE_SERVICE_ACCOUNT: ${{ env.FIREBASE_SERVICE_ACCOUNT }}
          ADMIN_EMAIL: ${{ env.ADMIN_EMAIL }}
          GEMINI_API_KEY: ${{ env.GEMINI_API_KEY }}
        run: npm test

  # Frontend Unit Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: ./frontend
        env:
          NODE_ENV: test
        run: npm run test:run

  # E2E Tests (Production Mode)
  e2e-tests:
    name: E2E Tests (Production Mode)
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          cat > .env << EOF
          POSTGRES_DB=${{ env.POSTGRES_DB }}
          POSTGRES_USER=${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}
          FIREBASE_SERVICE_ACCOUNT=${{ env.FIREBASE_SERVICE_ACCOUNT }}
          ADMIN_EMAIL=${{ env.ADMIN_EMAIL }}
          GEMINI_API_KEY=${{ env.GEMINI_API_KEY }}
          PUBLIC_BACKEND_API_URL=${{ env.PUBLIC_BACKEND_API_URL }}
          PUBLIC_FIREBASE_API_KEY=${{ env.PUBLIC_FIREBASE_API_KEY }}
          PUBLIC_FIREBASE_AUTH_DOMAIN=${{ env.PUBLIC_FIREBASE_AUTH_DOMAIN }}
          PUBLIC_FIREBASE_PROJECT_ID=${{ env.PUBLIC_FIREBASE_PROJECT_ID }}
          PUBLIC_FIREBASE_STORAGE_BUCKET=${{ env.PUBLIC_FIREBASE_STORAGE_BUCKET }}
          PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ env.PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          PUBLIC_FIREBASE_APP_ID=${{ env.PUBLIC_FIREBASE_APP_ID }}
          EOF

      - name: Build and start production services
        run: |
          echo "🔨 Building production services for E2E testing..."
          docker compose -f docker-compose.test.yml build backend frontend e2e-test

      - name: Start production services
        run: |
          echo "🚀 Starting production services..."
          docker compose -f docker-compose.test.yml up -d postgres backend frontend

      - name: Wait for services to be ready
        run: |
          echo "⏳ Waiting for production services to be ready..."
          echo "Backend health check..."
          timeout 120 bash -c 'until docker compose -f docker-compose.test.yml exec -T backend wget --no-verbose --tries=1 --spider http://localhost:5000/api/health; do sleep 5; done'
          echo "Frontend health check..."
          timeout 120 bash -c 'until docker compose -f docker-compose.test.yml exec -T frontend wget --no-verbose --tries=1 --spider http://localhost:3000; do sleep 5; done'
          echo "✅ Production services are ready"

      - name: Run E2E tests against production services
        run: |
          echo "🧪 Running E2E tests against production services..."
          docker compose -f docker-compose.test.yml --profile e2e up --build --abort-on-container-exit --exit-code-from e2e-test e2e-test

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            e2e/test-results/
            e2e/playwright-report/
          retention-days: 7

      - name: Upload service logs for debugging
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: service-logs
          path: |
            service-logs/
          retention-days: 3

      - name: Collect service logs
        if: always()
        run: |
          mkdir -p service-logs
          docker compose -f docker-compose.test.yml logs backend > service-logs/backend.log
          docker compose -f docker-compose.test.yml logs frontend > service-logs/frontend.log
          docker compose -f docker-compose.test.yml logs e2e-test > service-logs/e2e-test.log

      - name: Cleanup E2E resources
        if: always()
        run: |
          echo "🧹 Cleaning up E2E resources..."
          docker compose -f docker-compose.test.yml down -v
          docker system prune -f

  # Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "📊 Test Results Summary:"
          echo "Backend Tests: ${{ needs.backend-tests.result }}"
          echo "Frontend Tests: ${{ needs.frontend-tests.result }}"
          echo "E2E Tests (Production): ${{ needs.e2e-tests.result }}"

          if [[ "${{ needs.backend-tests.result }}" == "success" && \
                "${{ needs.frontend-tests.result }}" == "success" && \
                "${{ needs.e2e-tests.result }}" == "success" ]]; then
            echo "✅ All tests passed! Production E2E testing successful."
            exit 0
          else
            echo "❌ Some tests failed!"
            echo "Backend: ${{ needs.backend-tests.result }}"
            echo "Frontend: ${{ needs.frontend-tests.result }}"
            echo "E2E: ${{ needs.e2e-tests.result }}"
            exit 1
          fi
