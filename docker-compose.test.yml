version: '3.8'

services:
  # Test database
  postgres-test:
    image: postgres:13
    environment:
      POSTGRES_DB: budgetwise_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./backend/src/config/db/init:/docker-entrypoint-initdb.d
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend tests
  backend-test:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    environment:
      - NODE_ENV=test
      - DB_HOST=postgres-test
      - DB_PORT=5432
      - DB_NAME=budgetwise_test
      - DB_USER=postgres
      - DB_PASSWORD=password
      - JWT_SECRET=test_jwt_secret_key_for_testing_only
      - FIREBASE_PROJECT_ID=test-project
      - FIREBASE_PRIVATE_KEY=test-key
      - FIREBASE_CLIENT_EMAIL=test@test.com
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - test-network
    depends_on:
      postgres-test:
        condition: service_healthy
    command: npm test

  # Frontend tests
  frontend-test:
    build:
      context: ./frontend
      target: test
    environment:
      - NODE_ENV=test
      - PUBLIC_BACKEND_API_URL=http://backend-test:3001
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - frontend_test_cache:/app/.vite-temp
    networks:
      - test-network
    # Override the default test command to use Docker-specific config
    command: >
      sh -c "
        echo 'Setting up test environment...' &&
        chmod -R 755 /app &&
        mkdir -p /app/.vite-temp &&
        chmod 777 /app/.vite-temp &&
        echo 'Running frontend tests with Docker config...' &&
        npm run test:docker
      "

  # E2E tests (if needed)
  e2e-test:
    build:
      context: ./e2e
    environment:
      - NODE_ENV=test
      - BACKEND_URL=http://backend-test:3001
      - FRONTEND_URL=http://frontend:3000
    volumes:
      - ./e2e:/app
      - /app/node_modules
    networks:
      - test-network
    depends_on:
      - backend-test
      - frontend-test
    profiles:
      - e2e
    command: npm test

  # Test runner service to orchestrate all tests
  test-runner:
    image: alpine:latest
    networks:
      - test-network
    depends_on:
      - backend-test
      - frontend-test
    command: >
      sh -c "
        echo 'All tests completed successfully!' &&
        exit 0
      "

volumes:
  postgres_test_data:
  frontend_test_cache:

networks:
  test-network:
    driver: bridge
