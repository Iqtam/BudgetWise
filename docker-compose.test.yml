version: "3.9"

services:
  # PostgreSQL for backend
  postgres:
    image: postgres:16-alpine
    container_name: postgres-db-test
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./backend/src/config/db/init:/docker-entrypoint-initdb.d
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend server (production mode)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: backend-test
    environment:
      NODE_ENV: production
      PORT: 5000
      HOST: 0.0.0.0
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      FIREBASE_SERVICE_ACCOUNT: ${FIREBASE_SERVICE_ACCOUNT}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
    expose:
      - "5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  # Frontend server (production build + preview mode)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: frontend-test
    environment:
      NODE_ENV: development
      PORT: 3000
      PUBLIC_BACKEND_API_URL: http://backend:5000/api
      PUBLIC_FIREBASE_API_KEY: ${PUBLIC_FIREBASE_API_KEY}
      PUBLIC_FIREBASE_AUTH_DOMAIN: ${PUBLIC_FIREBASE_AUTH_DOMAIN}
      PUBLIC_FIREBASE_PROJECT_ID: ${PUBLIC_FIREBASE_PROJECT_ID}
      PUBLIC_FIREBASE_STORAGE_BUCKET: ${PUBLIC_FIREBASE_STORAGE_BUCKET}
      PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${PUBLIC_FIREBASE_MESSAGING_SENDER_ID}
      PUBLIC_FIREBASE_APP_ID: ${PUBLIC_FIREBASE_APP_ID}
    expose:
      - "3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - test-network
    command: sh -c "npm run build && npm run preview -- --host --port 3000"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s


  # Playwright E2E tests
  e2e-test:
    build:
      context: ./e2e
      dockerfile: Dockerfile
    container_name: e2e-runner
    environment:
      NODE_ENV: test
      BACKEND_URL: http://backend:5000
      FRONTEND_URL: http://frontend:3000
      PUBLIC_FIREBASE_API_KEY: ${PUBLIC_FIREBASE_API_KEY}
      PUBLIC_FIREBASE_AUTH_DOMAIN: ${PUBLIC_FIREBASE_AUTH_DOMAIN}
      PUBLIC_FIREBASE_PROJECT_ID: ${PUBLIC_FIREBASE_PROJECT_ID}
      PUBLIC_FIREBASE_STORAGE_BUCKET: ${PUBLIC_FIREBASE_STORAGE_BUCKET}
      PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${PUBLIC_FIREBASE_MESSAGING_SENDER_ID}
      PUBLIC_FIREBASE_APP_ID: ${PUBLIC_FIREBASE_APP_ID}
    volumes:
      - ./e2e:/app
    networks:
      - test-network
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    profiles:
      - e2e
    command: npm test

volumes:
  postgres_test_data:

networks:
  test-network:
    driver: bridge
